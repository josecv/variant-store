/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.wip;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GACallSet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GACallSet\",\"namespace\":\"org.ga4gh.wip\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"sampleId\",\"type\":\"string\"},{\"name\":\"callsetType\",\"type\":{\"type\":\"enum\",\"name\":\"GACallSetType\",\"symbols\":[\"GENOTYPE\",\"HAPLOTYPE\"]}},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence sampleId;
  @Deprecated public org.ga4gh.wip.GACallSetType callsetType;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> info;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GACallSet() {}

  /**
   * All-args constructor.
   */
  public GACallSet(java.lang.CharSequence id, java.lang.CharSequence sampleId, org.ga4gh.wip.GACallSetType callsetType, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> info) {
    this.id = id;
    this.sampleId = sampleId;
    this.callsetType = callsetType;
    this.info = info;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return sampleId;
    case 2: return callsetType;
    case 3: return info;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: sampleId = (java.lang.CharSequence)value$; break;
    case 2: callsetType = (org.ga4gh.wip.GACallSetType)value$; break;
    case 3: info = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'sampleId' field.
   */
  public java.lang.CharSequence getSampleId() {
    return sampleId;
  }

  /**
   * Sets the value of the 'sampleId' field.
   * @param value the value to set.
   */
  public void setSampleId(java.lang.CharSequence value) {
    this.sampleId = value;
  }

  /**
   * Gets the value of the 'callsetType' field.
   */
  public org.ga4gh.wip.GACallSetType getCallsetType() {
    return callsetType;
  }

  /**
   * Sets the value of the 'callsetType' field.
   * @param value the value to set.
   */
  public void setCallsetType(org.ga4gh.wip.GACallSetType value) {
    this.callsetType = value;
  }

  /**
   * Gets the value of the 'info' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getInfo() {
    return info;
  }

  /**
   * Sets the value of the 'info' field.
   * @param value the value to set.
   */
  public void setInfo(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.info = value;
  }

  /** Creates a new GACallSet RecordBuilder */
  public static org.ga4gh.wip.GACallSet.Builder newBuilder() {
    return new org.ga4gh.wip.GACallSet.Builder();
  }
  
  /** Creates a new GACallSet RecordBuilder by copying an existing Builder */
  public static org.ga4gh.wip.GACallSet.Builder newBuilder(org.ga4gh.wip.GACallSet.Builder other) {
    return new org.ga4gh.wip.GACallSet.Builder(other);
  }
  
  /** Creates a new GACallSet RecordBuilder by copying an existing GACallSet instance */
  public static org.ga4gh.wip.GACallSet.Builder newBuilder(org.ga4gh.wip.GACallSet other) {
    return new org.ga4gh.wip.GACallSet.Builder(other);
  }
  
  /**
   * RecordBuilder for GACallSet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GACallSet>
    implements org.apache.avro.data.RecordBuilder<GACallSet> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence sampleId;
    private org.ga4gh.wip.GACallSetType callsetType;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> info;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.wip.GACallSet.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.wip.GACallSet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sampleId)) {
        this.sampleId = data().deepCopy(fields()[1].schema(), other.sampleId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.callsetType)) {
        this.callsetType = data().deepCopy(fields()[2].schema(), other.callsetType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.info)) {
        this.info = data().deepCopy(fields()[3].schema(), other.info);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GACallSet instance */
    private Builder(org.ga4gh.wip.GACallSet other) {
            super(org.ga4gh.wip.GACallSet.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sampleId)) {
        this.sampleId = data().deepCopy(fields()[1].schema(), other.sampleId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.callsetType)) {
        this.callsetType = data().deepCopy(fields()[2].schema(), other.callsetType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.info)) {
        this.info = data().deepCopy(fields()[3].schema(), other.info);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.ga4gh.wip.GACallSet.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.ga4gh.wip.GACallSet.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'sampleId' field */
    public java.lang.CharSequence getSampleId() {
      return sampleId;
    }
    
    /** Sets the value of the 'sampleId' field */
    public org.ga4gh.wip.GACallSet.Builder setSampleId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sampleId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'sampleId' field has been set */
    public boolean hasSampleId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'sampleId' field */
    public org.ga4gh.wip.GACallSet.Builder clearSampleId() {
      sampleId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'callsetType' field */
    public org.ga4gh.wip.GACallSetType getCallsetType() {
      return callsetType;
    }
    
    /** Sets the value of the 'callsetType' field */
    public org.ga4gh.wip.GACallSet.Builder setCallsetType(org.ga4gh.wip.GACallSetType value) {
      validate(fields()[2], value);
      this.callsetType = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'callsetType' field has been set */
    public boolean hasCallsetType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'callsetType' field */
    public org.ga4gh.wip.GACallSet.Builder clearCallsetType() {
      callsetType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'info' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getInfo() {
      return info;
    }
    
    /** Sets the value of the 'info' field */
    public org.ga4gh.wip.GACallSet.Builder setInfo(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.info = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'info' field has been set */
    public boolean hasInfo() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'info' field */
    public org.ga4gh.wip.GACallSet.Builder clearInfo() {
      info = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public GACallSet build() {
      try {
        GACallSet record = new GACallSet();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sampleId = fieldSetFlags()[1] ? this.sampleId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.callsetType = fieldSetFlags()[2] ? this.callsetType : (org.ga4gh.wip.GACallSetType) defaultValue(fields()[2]);
        record.info = fieldSetFlags()[3] ? this.info : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
