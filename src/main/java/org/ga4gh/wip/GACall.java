/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh.wip;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GACall extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GACall\",\"namespace\":\"org.ga4gh.wip\",\"fields\":[{\"name\":\"callSetId\",\"type\":\"string\"},{\"name\":\"alleleID\",\"type\":\"string\"},{\"name\":\"copyNumber\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"dosage\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"probability\",\"type\":{\"type\":\"array\",\"items\":\"float\"},\"default\":[]},{\"name\":\"likelihood\",\"type\":{\"type\":\"array\",\"items\":\"float\"},\"default\":[]},{\"name\":\"readCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"evidence\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence callSetId;
  @Deprecated public java.lang.CharSequence alleleID;
  @Deprecated public java.lang.Integer copyNumber;
  @Deprecated public java.lang.Float dosage;
  @Deprecated public java.util.List<java.lang.Float> probability;
  @Deprecated public java.util.List<java.lang.Float> likelihood;
  @Deprecated public java.lang.Integer readCount;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> evidence;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GACall() {}

  /**
   * All-args constructor.
   */
  public GACall(java.lang.CharSequence callSetId, java.lang.CharSequence alleleID, java.lang.Integer copyNumber, java.lang.Float dosage, java.util.List<java.lang.Float> probability, java.util.List<java.lang.Float> likelihood, java.lang.Integer readCount, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> evidence) {
    this.callSetId = callSetId;
    this.alleleID = alleleID;
    this.copyNumber = copyNumber;
    this.dosage = dosage;
    this.probability = probability;
    this.likelihood = likelihood;
    this.readCount = readCount;
    this.evidence = evidence;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return callSetId;
    case 1: return alleleID;
    case 2: return copyNumber;
    case 3: return dosage;
    case 4: return probability;
    case 5: return likelihood;
    case 6: return readCount;
    case 7: return evidence;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: callSetId = (java.lang.CharSequence)value$; break;
    case 1: alleleID = (java.lang.CharSequence)value$; break;
    case 2: copyNumber = (java.lang.Integer)value$; break;
    case 3: dosage = (java.lang.Float)value$; break;
    case 4: probability = (java.util.List<java.lang.Float>)value$; break;
    case 5: likelihood = (java.util.List<java.lang.Float>)value$; break;
    case 6: readCount = (java.lang.Integer)value$; break;
    case 7: evidence = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'callSetId' field.
   */
  public java.lang.CharSequence getCallSetId() {
    return callSetId;
  }

  /**
   * Sets the value of the 'callSetId' field.
   * @param value the value to set.
   */
  public void setCallSetId(java.lang.CharSequence value) {
    this.callSetId = value;
  }

  /**
   * Gets the value of the 'alleleID' field.
   */
  public java.lang.CharSequence getAlleleID() {
    return alleleID;
  }

  /**
   * Sets the value of the 'alleleID' field.
   * @param value the value to set.
   */
  public void setAlleleID(java.lang.CharSequence value) {
    this.alleleID = value;
  }

  /**
   * Gets the value of the 'copyNumber' field.
   */
  public java.lang.Integer getCopyNumber() {
    return copyNumber;
  }

  /**
   * Sets the value of the 'copyNumber' field.
   * @param value the value to set.
   */
  public void setCopyNumber(java.lang.Integer value) {
    this.copyNumber = value;
  }

  /**
   * Gets the value of the 'dosage' field.
   */
  public java.lang.Float getDosage() {
    return dosage;
  }

  /**
   * Sets the value of the 'dosage' field.
   * @param value the value to set.
   */
  public void setDosage(java.lang.Float value) {
    this.dosage = value;
  }

  /**
   * Gets the value of the 'probability' field.
   */
  public java.util.List<java.lang.Float> getProbability() {
    return probability;
  }

  /**
   * Sets the value of the 'probability' field.
   * @param value the value to set.
   */
  public void setProbability(java.util.List<java.lang.Float> value) {
    this.probability = value;
  }

  /**
   * Gets the value of the 'likelihood' field.
   */
  public java.util.List<java.lang.Float> getLikelihood() {
    return likelihood;
  }

  /**
   * Sets the value of the 'likelihood' field.
   * @param value the value to set.
   */
  public void setLikelihood(java.util.List<java.lang.Float> value) {
    this.likelihood = value;
  }

  /**
   * Gets the value of the 'readCount' field.
   */
  public java.lang.Integer getReadCount() {
    return readCount;
  }

  /**
   * Sets the value of the 'readCount' field.
   * @param value the value to set.
   */
  public void setReadCount(java.lang.Integer value) {
    this.readCount = value;
  }

  /**
   * Gets the value of the 'evidence' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getEvidence() {
    return evidence;
  }

  /**
   * Sets the value of the 'evidence' field.
   * @param value the value to set.
   */
  public void setEvidence(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.evidence = value;
  }

  /** Creates a new GACall RecordBuilder */
  public static org.ga4gh.wip.GACall.Builder newBuilder() {
    return new org.ga4gh.wip.GACall.Builder();
  }
  
  /** Creates a new GACall RecordBuilder by copying an existing Builder */
  public static org.ga4gh.wip.GACall.Builder newBuilder(org.ga4gh.wip.GACall.Builder other) {
    return new org.ga4gh.wip.GACall.Builder(other);
  }
  
  /** Creates a new GACall RecordBuilder by copying an existing GACall instance */
  public static org.ga4gh.wip.GACall.Builder newBuilder(org.ga4gh.wip.GACall other) {
    return new org.ga4gh.wip.GACall.Builder(other);
  }
  
  /**
   * RecordBuilder for GACall instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GACall>
    implements org.apache.avro.data.RecordBuilder<GACall> {

    private java.lang.CharSequence callSetId;
    private java.lang.CharSequence alleleID;
    private java.lang.Integer copyNumber;
    private java.lang.Float dosage;
    private java.util.List<java.lang.Float> probability;
    private java.util.List<java.lang.Float> likelihood;
    private java.lang.Integer readCount;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> evidence;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.wip.GACall.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.wip.GACall.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.callSetId)) {
        this.callSetId = data().deepCopy(fields()[0].schema(), other.callSetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.alleleID)) {
        this.alleleID = data().deepCopy(fields()[1].schema(), other.alleleID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.copyNumber)) {
        this.copyNumber = data().deepCopy(fields()[2].schema(), other.copyNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dosage)) {
        this.dosage = data().deepCopy(fields()[3].schema(), other.dosage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.probability)) {
        this.probability = data().deepCopy(fields()[4].schema(), other.probability);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.likelihood)) {
        this.likelihood = data().deepCopy(fields()[5].schema(), other.likelihood);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.readCount)) {
        this.readCount = data().deepCopy(fields()[6].schema(), other.readCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.evidence)) {
        this.evidence = data().deepCopy(fields()[7].schema(), other.evidence);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GACall instance */
    private Builder(org.ga4gh.wip.GACall other) {
            super(org.ga4gh.wip.GACall.SCHEMA$);
      if (isValidValue(fields()[0], other.callSetId)) {
        this.callSetId = data().deepCopy(fields()[0].schema(), other.callSetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.alleleID)) {
        this.alleleID = data().deepCopy(fields()[1].schema(), other.alleleID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.copyNumber)) {
        this.copyNumber = data().deepCopy(fields()[2].schema(), other.copyNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dosage)) {
        this.dosage = data().deepCopy(fields()[3].schema(), other.dosage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.probability)) {
        this.probability = data().deepCopy(fields()[4].schema(), other.probability);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.likelihood)) {
        this.likelihood = data().deepCopy(fields()[5].schema(), other.likelihood);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.readCount)) {
        this.readCount = data().deepCopy(fields()[6].schema(), other.readCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.evidence)) {
        this.evidence = data().deepCopy(fields()[7].schema(), other.evidence);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'callSetId' field */
    public java.lang.CharSequence getCallSetId() {
      return callSetId;
    }
    
    /** Sets the value of the 'callSetId' field */
    public org.ga4gh.wip.GACall.Builder setCallSetId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.callSetId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'callSetId' field has been set */
    public boolean hasCallSetId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'callSetId' field */
    public org.ga4gh.wip.GACall.Builder clearCallSetId() {
      callSetId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'alleleID' field */
    public java.lang.CharSequence getAlleleID() {
      return alleleID;
    }
    
    /** Sets the value of the 'alleleID' field */
    public org.ga4gh.wip.GACall.Builder setAlleleID(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.alleleID = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'alleleID' field has been set */
    public boolean hasAlleleID() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'alleleID' field */
    public org.ga4gh.wip.GACall.Builder clearAlleleID() {
      alleleID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'copyNumber' field */
    public java.lang.Integer getCopyNumber() {
      return copyNumber;
    }
    
    /** Sets the value of the 'copyNumber' field */
    public org.ga4gh.wip.GACall.Builder setCopyNumber(java.lang.Integer value) {
      validate(fields()[2], value);
      this.copyNumber = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'copyNumber' field has been set */
    public boolean hasCopyNumber() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'copyNumber' field */
    public org.ga4gh.wip.GACall.Builder clearCopyNumber() {
      copyNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'dosage' field */
    public java.lang.Float getDosage() {
      return dosage;
    }
    
    /** Sets the value of the 'dosage' field */
    public org.ga4gh.wip.GACall.Builder setDosage(java.lang.Float value) {
      validate(fields()[3], value);
      this.dosage = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'dosage' field has been set */
    public boolean hasDosage() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'dosage' field */
    public org.ga4gh.wip.GACall.Builder clearDosage() {
      dosage = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'probability' field */
    public java.util.List<java.lang.Float> getProbability() {
      return probability;
    }
    
    /** Sets the value of the 'probability' field */
    public org.ga4gh.wip.GACall.Builder setProbability(java.util.List<java.lang.Float> value) {
      validate(fields()[4], value);
      this.probability = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'probability' field has been set */
    public boolean hasProbability() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'probability' field */
    public org.ga4gh.wip.GACall.Builder clearProbability() {
      probability = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'likelihood' field */
    public java.util.List<java.lang.Float> getLikelihood() {
      return likelihood;
    }
    
    /** Sets the value of the 'likelihood' field */
    public org.ga4gh.wip.GACall.Builder setLikelihood(java.util.List<java.lang.Float> value) {
      validate(fields()[5], value);
      this.likelihood = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'likelihood' field has been set */
    public boolean hasLikelihood() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'likelihood' field */
    public org.ga4gh.wip.GACall.Builder clearLikelihood() {
      likelihood = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'readCount' field */
    public java.lang.Integer getReadCount() {
      return readCount;
    }
    
    /** Sets the value of the 'readCount' field */
    public org.ga4gh.wip.GACall.Builder setReadCount(java.lang.Integer value) {
      validate(fields()[6], value);
      this.readCount = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'readCount' field has been set */
    public boolean hasReadCount() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'readCount' field */
    public org.ga4gh.wip.GACall.Builder clearReadCount() {
      readCount = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'evidence' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getEvidence() {
      return evidence;
    }
    
    /** Sets the value of the 'evidence' field */
    public org.ga4gh.wip.GACall.Builder setEvidence(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.evidence = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'evidence' field has been set */
    public boolean hasEvidence() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'evidence' field */
    public org.ga4gh.wip.GACall.Builder clearEvidence() {
      evidence = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public GACall build() {
      try {
        GACall record = new GACall();
        record.callSetId = fieldSetFlags()[0] ? this.callSetId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.alleleID = fieldSetFlags()[1] ? this.alleleID : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.copyNumber = fieldSetFlags()[2] ? this.copyNumber : (java.lang.Integer) defaultValue(fields()[2]);
        record.dosage = fieldSetFlags()[3] ? this.dosage : (java.lang.Float) defaultValue(fields()[3]);
        record.probability = fieldSetFlags()[4] ? this.probability : (java.util.List<java.lang.Float>) defaultValue(fields()[4]);
        record.likelihood = fieldSetFlags()[5] ? this.likelihood : (java.util.List<java.lang.Float>) defaultValue(fields()[5]);
        record.readCount = fieldSetFlags()[6] ? this.readCount : (java.lang.Integer) defaultValue(fields()[6]);
        record.evidence = fieldSetFlags()[7] ? this.evidence : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
