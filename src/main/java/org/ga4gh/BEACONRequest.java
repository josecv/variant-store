/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BEACONRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BEACONRequest\",\"namespace\":\"org.ga4gh\",\"fields\":[{\"name\":\"populationId\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the targeted population\",\"default\":null},{\"name\":\"referenceVersion\",\"type\":[\"null\",\"string\"],\"doc\":\"The version of the reference\",\"default\":null},{\"name\":\"chromosome\",\"type\":[\"null\",\"string\"],\"doc\":\"The chromosome of the request\",\"default\":null},{\"name\":\"coordinate\",\"type\":[\"null\",\"long\"],\"doc\":\"0-based allele locus\",\"default\":null},{\"name\":\"allele\",\"type\":[\"null\",\"string\"],\"doc\":\"allele\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The name of the targeted population */
  @Deprecated public java.lang.CharSequence populationId;
  /** The version of the reference */
  @Deprecated public java.lang.CharSequence referenceVersion;
  /** The chromosome of the request */
  @Deprecated public java.lang.CharSequence chromosome;
  /** 0-based allele locus */
  @Deprecated public java.lang.Long coordinate;
  /** allele */
  @Deprecated public java.lang.CharSequence allele;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public BEACONRequest() {}

  /**
   * All-args constructor.
   */
  public BEACONRequest(java.lang.CharSequence populationId, java.lang.CharSequence referenceVersion, java.lang.CharSequence chromosome, java.lang.Long coordinate, java.lang.CharSequence allele) {
    this.populationId = populationId;
    this.referenceVersion = referenceVersion;
    this.chromosome = chromosome;
    this.coordinate = coordinate;
    this.allele = allele;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return populationId;
    case 1: return referenceVersion;
    case 2: return chromosome;
    case 3: return coordinate;
    case 4: return allele;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: populationId = (java.lang.CharSequence)value$; break;
    case 1: referenceVersion = (java.lang.CharSequence)value$; break;
    case 2: chromosome = (java.lang.CharSequence)value$; break;
    case 3: coordinate = (java.lang.Long)value$; break;
    case 4: allele = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'populationId' field.
   * The name of the targeted population   */
  public java.lang.CharSequence getPopulationId() {
    return populationId;
  }

  /**
   * Sets the value of the 'populationId' field.
   * The name of the targeted population   * @param value the value to set.
   */
  public void setPopulationId(java.lang.CharSequence value) {
    this.populationId = value;
  }

  /**
   * Gets the value of the 'referenceVersion' field.
   * The version of the reference   */
  public java.lang.CharSequence getReferenceVersion() {
    return referenceVersion;
  }

  /**
   * Sets the value of the 'referenceVersion' field.
   * The version of the reference   * @param value the value to set.
   */
  public void setReferenceVersion(java.lang.CharSequence value) {
    this.referenceVersion = value;
  }

  /**
   * Gets the value of the 'chromosome' field.
   * The chromosome of the request   */
  public java.lang.CharSequence getChromosome() {
    return chromosome;
  }

  /**
   * Sets the value of the 'chromosome' field.
   * The chromosome of the request   * @param value the value to set.
   */
  public void setChromosome(java.lang.CharSequence value) {
    this.chromosome = value;
  }

  /**
   * Gets the value of the 'coordinate' field.
   * 0-based allele locus   */
  public java.lang.Long getCoordinate() {
    return coordinate;
  }

  /**
   * Sets the value of the 'coordinate' field.
   * 0-based allele locus   * @param value the value to set.
   */
  public void setCoordinate(java.lang.Long value) {
    this.coordinate = value;
  }

  /**
   * Gets the value of the 'allele' field.
   * allele   */
  public java.lang.CharSequence getAllele() {
    return allele;
  }

  /**
   * Sets the value of the 'allele' field.
   * allele   * @param value the value to set.
   */
  public void setAllele(java.lang.CharSequence value) {
    this.allele = value;
  }

  /** Creates a new BEACONRequest RecordBuilder */
  public static org.ga4gh.BEACONRequest.Builder newBuilder() {
    return new org.ga4gh.BEACONRequest.Builder();
  }
  
  /** Creates a new BEACONRequest RecordBuilder by copying an existing Builder */
  public static org.ga4gh.BEACONRequest.Builder newBuilder(org.ga4gh.BEACONRequest.Builder other) {
    return new org.ga4gh.BEACONRequest.Builder(other);
  }
  
  /** Creates a new BEACONRequest RecordBuilder by copying an existing BEACONRequest instance */
  public static org.ga4gh.BEACONRequest.Builder newBuilder(org.ga4gh.BEACONRequest other) {
    return new org.ga4gh.BEACONRequest.Builder(other);
  }
  
  /**
   * RecordBuilder for BEACONRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BEACONRequest>
    implements org.apache.avro.data.RecordBuilder<BEACONRequest> {

    private java.lang.CharSequence populationId;
    private java.lang.CharSequence referenceVersion;
    private java.lang.CharSequence chromosome;
    private java.lang.Long coordinate;
    private java.lang.CharSequence allele;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.BEACONRequest.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.BEACONRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.populationId)) {
        this.populationId = data().deepCopy(fields()[0].schema(), other.populationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.referenceVersion)) {
        this.referenceVersion = data().deepCopy(fields()[1].schema(), other.referenceVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[2].schema(), other.chromosome);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.coordinate)) {
        this.coordinate = data().deepCopy(fields()[3].schema(), other.coordinate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.allele)) {
        this.allele = data().deepCopy(fields()[4].schema(), other.allele);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing BEACONRequest instance */
    private Builder(org.ga4gh.BEACONRequest other) {
            super(org.ga4gh.BEACONRequest.SCHEMA$);
      if (isValidValue(fields()[0], other.populationId)) {
        this.populationId = data().deepCopy(fields()[0].schema(), other.populationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.referenceVersion)) {
        this.referenceVersion = data().deepCopy(fields()[1].schema(), other.referenceVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chromosome)) {
        this.chromosome = data().deepCopy(fields()[2].schema(), other.chromosome);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.coordinate)) {
        this.coordinate = data().deepCopy(fields()[3].schema(), other.coordinate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.allele)) {
        this.allele = data().deepCopy(fields()[4].schema(), other.allele);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'populationId' field */
    public java.lang.CharSequence getPopulationId() {
      return populationId;
    }
    
    /** Sets the value of the 'populationId' field */
    public org.ga4gh.BEACONRequest.Builder setPopulationId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.populationId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'populationId' field has been set */
    public boolean hasPopulationId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'populationId' field */
    public org.ga4gh.BEACONRequest.Builder clearPopulationId() {
      populationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'referenceVersion' field */
    public java.lang.CharSequence getReferenceVersion() {
      return referenceVersion;
    }
    
    /** Sets the value of the 'referenceVersion' field */
    public org.ga4gh.BEACONRequest.Builder setReferenceVersion(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.referenceVersion = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceVersion' field has been set */
    public boolean hasReferenceVersion() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'referenceVersion' field */
    public org.ga4gh.BEACONRequest.Builder clearReferenceVersion() {
      referenceVersion = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'chromosome' field */
    public java.lang.CharSequence getChromosome() {
      return chromosome;
    }
    
    /** Sets the value of the 'chromosome' field */
    public org.ga4gh.BEACONRequest.Builder setChromosome(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.chromosome = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'chromosome' field has been set */
    public boolean hasChromosome() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'chromosome' field */
    public org.ga4gh.BEACONRequest.Builder clearChromosome() {
      chromosome = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'coordinate' field */
    public java.lang.Long getCoordinate() {
      return coordinate;
    }
    
    /** Sets the value of the 'coordinate' field */
    public org.ga4gh.BEACONRequest.Builder setCoordinate(java.lang.Long value) {
      validate(fields()[3], value);
      this.coordinate = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'coordinate' field has been set */
    public boolean hasCoordinate() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'coordinate' field */
    public org.ga4gh.BEACONRequest.Builder clearCoordinate() {
      coordinate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'allele' field */
    public java.lang.CharSequence getAllele() {
      return allele;
    }
    
    /** Sets the value of the 'allele' field */
    public org.ga4gh.BEACONRequest.Builder setAllele(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.allele = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'allele' field has been set */
    public boolean hasAllele() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'allele' field */
    public org.ga4gh.BEACONRequest.Builder clearAllele() {
      allele = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public BEACONRequest build() {
      try {
        BEACONRequest record = new BEACONRequest();
        record.populationId = fieldSetFlags()[0] ? this.populationId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.referenceVersion = fieldSetFlags()[1] ? this.referenceVersion : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.chromosome = fieldSetFlags()[2] ? this.chromosome : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.coordinate = fieldSetFlags()[3] ? this.coordinate : (java.lang.Long) defaultValue(fields()[3]);
        record.allele = fieldSetFlags()[4] ? this.allele : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
