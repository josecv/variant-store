/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh;  
@SuppressWarnings("all")
/** `GAVariant` and `GACallSet` both belong to a `GAVariantSet`.
`GAVariantSet` belongs to a `GADataset`.
The variant set is equivalent to a VCF file. */
@org.apache.avro.specific.AvroGenerated
public class GAVariantSet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GAVariantSet\",\"namespace\":\"org.ga4gh\",\"doc\":\"`GAVariant` and `GACallSet` both belong to a `GAVariantSet`.\\n`GAVariantSet` belongs to a `GADataset`.\\nThe variant set is equivalent to a VCF file.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The variant set ID.\"},{\"name\":\"datasetId\",\"type\":\"string\",\"doc\":\"The ID of the dataset this variant set belongs to.\"},{\"name\":\"metadata\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GAVariantSetMetadata\",\"doc\":\"This metadata represents VCF header information.\",\"fields\":[{\"name\":\"key\",\"type\":\"string\",\"doc\":\"The top-level key.\"},{\"name\":\"value\",\"type\":\"string\",\"doc\":\"The value field for simple metadata.\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"User-provided ID field, not enforced by this API.\\n  Two or more pieces of structured metadata with identical\\n  id and key fields are considered equivalent.\"},{\"name\":\"type\",\"type\":\"string\",\"doc\":\"The type of data.\"},{\"name\":\"number\",\"type\":\"string\",\"doc\":\"The number of values that can be included in a field described by this\\n  metadata.\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"A textual description of this metadata.\"},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":\"string\"}},\"doc\":\"Remaining structured metadata key-value pairs.\",\"default\":{}}]}},\"doc\":\"The metadata associated with this variant set. This is equivalent to\\n  the VCF header information not already presented in first class fields.\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The variant set ID. */
  @Deprecated public java.lang.CharSequence id;
  /** The ID of the dataset this variant set belongs to. */
  @Deprecated public java.lang.CharSequence datasetId;
  /** The metadata associated with this variant set. This is equivalent to
  the VCF header information not already presented in first class fields. */
  @Deprecated public java.util.List<org.ga4gh.GAVariantSetMetadata> metadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GAVariantSet() {}

  /**
   * All-args constructor.
   */
  public GAVariantSet(java.lang.CharSequence id, java.lang.CharSequence datasetId, java.util.List<org.ga4gh.GAVariantSetMetadata> metadata) {
    this.id = id;
    this.datasetId = datasetId;
    this.metadata = metadata;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return datasetId;
    case 2: return metadata;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: datasetId = (java.lang.CharSequence)value$; break;
    case 2: metadata = (java.util.List<org.ga4gh.GAVariantSetMetadata>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * The variant set ID.   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The variant set ID.   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'datasetId' field.
   * The ID of the dataset this variant set belongs to.   */
  public java.lang.CharSequence getDatasetId() {
    return datasetId;
  }

  /**
   * Sets the value of the 'datasetId' field.
   * The ID of the dataset this variant set belongs to.   * @param value the value to set.
   */
  public void setDatasetId(java.lang.CharSequence value) {
    this.datasetId = value;
  }

  /**
   * Gets the value of the 'metadata' field.
   * The metadata associated with this variant set. This is equivalent to
  the VCF header information not already presented in first class fields.   */
  public java.util.List<org.ga4gh.GAVariantSetMetadata> getMetadata() {
    return metadata;
  }

  /**
   * Sets the value of the 'metadata' field.
   * The metadata associated with this variant set. This is equivalent to
  the VCF header information not already presented in first class fields.   * @param value the value to set.
   */
  public void setMetadata(java.util.List<org.ga4gh.GAVariantSetMetadata> value) {
    this.metadata = value;
  }

  /** Creates a new GAVariantSet RecordBuilder */
  public static org.ga4gh.GAVariantSet.Builder newBuilder() {
    return new org.ga4gh.GAVariantSet.Builder();
  }
  
  /** Creates a new GAVariantSet RecordBuilder by copying an existing Builder */
  public static org.ga4gh.GAVariantSet.Builder newBuilder(org.ga4gh.GAVariantSet.Builder other) {
    return new org.ga4gh.GAVariantSet.Builder(other);
  }
  
  /** Creates a new GAVariantSet RecordBuilder by copying an existing GAVariantSet instance */
  public static org.ga4gh.GAVariantSet.Builder newBuilder(org.ga4gh.GAVariantSet other) {
    return new org.ga4gh.GAVariantSet.Builder(other);
  }
  
  /**
   * RecordBuilder for GAVariantSet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GAVariantSet>
    implements org.apache.avro.data.RecordBuilder<GAVariantSet> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence datasetId;
    private java.util.List<org.ga4gh.GAVariantSetMetadata> metadata;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.GAVariantSet.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.GAVariantSet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.datasetId)) {
        this.datasetId = data().deepCopy(fields()[1].schema(), other.datasetId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.metadata)) {
        this.metadata = data().deepCopy(fields()[2].schema(), other.metadata);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GAVariantSet instance */
    private Builder(org.ga4gh.GAVariantSet other) {
            super(org.ga4gh.GAVariantSet.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.datasetId)) {
        this.datasetId = data().deepCopy(fields()[1].schema(), other.datasetId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.metadata)) {
        this.metadata = data().deepCopy(fields()[2].schema(), other.metadata);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.ga4gh.GAVariantSet.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public org.ga4gh.GAVariantSet.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'datasetId' field */
    public java.lang.CharSequence getDatasetId() {
      return datasetId;
    }
    
    /** Sets the value of the 'datasetId' field */
    public org.ga4gh.GAVariantSet.Builder setDatasetId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.datasetId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'datasetId' field has been set */
    public boolean hasDatasetId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'datasetId' field */
    public org.ga4gh.GAVariantSet.Builder clearDatasetId() {
      datasetId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'metadata' field */
    public java.util.List<org.ga4gh.GAVariantSetMetadata> getMetadata() {
      return metadata;
    }
    
    /** Sets the value of the 'metadata' field */
    public org.ga4gh.GAVariantSet.Builder setMetadata(java.util.List<org.ga4gh.GAVariantSetMetadata> value) {
      validate(fields()[2], value);
      this.metadata = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'metadata' field has been set */
    public boolean hasMetadata() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'metadata' field */
    public org.ga4gh.GAVariantSet.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public GAVariantSet build() {
      try {
        GAVariantSet record = new GAVariantSet();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.datasetId = fieldSetFlags()[1] ? this.datasetId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.metadata = fieldSetFlags()[2] ? this.metadata : (java.util.List<org.ga4gh.GAVariantSetMetadata>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
