/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BEACONResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BEACONResponse\",\"namespace\":\"org.ga4gh\",\"fields\":[{\"name\":\"exists\",\"type\":[\"null\",\"boolean\"],\"doc\":\"outcome of the existence test\",\"default\":null},{\"name\":\"frequency\",\"type\":[\"null\",\"long\"],\"doc\":\"allele frequency\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** outcome of the existence test */
  @Deprecated public java.lang.Boolean exists;
  /** allele frequency */
  @Deprecated public java.lang.Long frequency;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public BEACONResponse() {}

  /**
   * All-args constructor.
   */
  public BEACONResponse(java.lang.Boolean exists, java.lang.Long frequency) {
    this.exists = exists;
    this.frequency = frequency;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return exists;
    case 1: return frequency;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: exists = (java.lang.Boolean)value$; break;
    case 1: frequency = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'exists' field.
   * outcome of the existence test   */
  public java.lang.Boolean getExists() {
    return exists;
  }

  /**
   * Sets the value of the 'exists' field.
   * outcome of the existence test   * @param value the value to set.
   */
  public void setExists(java.lang.Boolean value) {
    this.exists = value;
  }

  /**
   * Gets the value of the 'frequency' field.
   * allele frequency   */
  public java.lang.Long getFrequency() {
    return frequency;
  }

  /**
   * Sets the value of the 'frequency' field.
   * allele frequency   * @param value the value to set.
   */
  public void setFrequency(java.lang.Long value) {
    this.frequency = value;
  }

  /** Creates a new BEACONResponse RecordBuilder */
  public static org.ga4gh.BEACONResponse.Builder newBuilder() {
    return new org.ga4gh.BEACONResponse.Builder();
  }
  
  /** Creates a new BEACONResponse RecordBuilder by copying an existing Builder */
  public static org.ga4gh.BEACONResponse.Builder newBuilder(org.ga4gh.BEACONResponse.Builder other) {
    return new org.ga4gh.BEACONResponse.Builder(other);
  }
  
  /** Creates a new BEACONResponse RecordBuilder by copying an existing BEACONResponse instance */
  public static org.ga4gh.BEACONResponse.Builder newBuilder(org.ga4gh.BEACONResponse other) {
    return new org.ga4gh.BEACONResponse.Builder(other);
  }
  
  /**
   * RecordBuilder for BEACONResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BEACONResponse>
    implements org.apache.avro.data.RecordBuilder<BEACONResponse> {

    private java.lang.Boolean exists;
    private java.lang.Long frequency;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.BEACONResponse.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.BEACONResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.exists)) {
        this.exists = data().deepCopy(fields()[0].schema(), other.exists);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.frequency)) {
        this.frequency = data().deepCopy(fields()[1].schema(), other.frequency);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing BEACONResponse instance */
    private Builder(org.ga4gh.BEACONResponse other) {
            super(org.ga4gh.BEACONResponse.SCHEMA$);
      if (isValidValue(fields()[0], other.exists)) {
        this.exists = data().deepCopy(fields()[0].schema(), other.exists);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.frequency)) {
        this.frequency = data().deepCopy(fields()[1].schema(), other.frequency);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'exists' field */
    public java.lang.Boolean getExists() {
      return exists;
    }
    
    /** Sets the value of the 'exists' field */
    public org.ga4gh.BEACONResponse.Builder setExists(java.lang.Boolean value) {
      validate(fields()[0], value);
      this.exists = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'exists' field has been set */
    public boolean hasExists() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'exists' field */
    public org.ga4gh.BEACONResponse.Builder clearExists() {
      exists = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'frequency' field */
    public java.lang.Long getFrequency() {
      return frequency;
    }
    
    /** Sets the value of the 'frequency' field */
    public org.ga4gh.BEACONResponse.Builder setFrequency(java.lang.Long value) {
      validate(fields()[1], value);
      this.frequency = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'frequency' field has been set */
    public boolean hasFrequency() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'frequency' field */
    public org.ga4gh.BEACONResponse.Builder clearFrequency() {
      frequency = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public BEACONResponse build() {
      try {
        BEACONResponse record = new BEACONResponse();
        record.exists = fieldSetFlags()[0] ? this.exists : (java.lang.Boolean) defaultValue(fields()[0]);
        record.frequency = fieldSetFlags()[1] ? this.frequency : (java.lang.Long) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
