/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GAExperiment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GAExperiment\",\"namespace\":\"org.ga4gh\",\"fields\":[{\"name\":\"libraryId\",\"type\":[\"null\",\"string\"],\"doc\":\"The library used as part of this experiment.\",\"default\":null},{\"name\":\"platformUnit\",\"type\":[\"null\",\"string\"],\"doc\":\"The platform unit used as part of this experiment.\",\"default\":null},{\"name\":\"sequencingCenter\",\"type\":[\"null\",\"string\"],\"doc\":\"The sequencing center used as part of this experiment.\"},{\"name\":\"instrumentModel\",\"type\":[\"null\",\"string\"],\"doc\":\"The instrument model used as part of this experiment.\\n  This maps to sequencing technology in BAM.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The library used as part of this experiment. */
  @Deprecated public java.lang.CharSequence libraryId;
  /** The platform unit used as part of this experiment. */
  @Deprecated public java.lang.CharSequence platformUnit;
  /** The sequencing center used as part of this experiment. */
  @Deprecated public java.lang.CharSequence sequencingCenter;
  /** The instrument model used as part of this experiment.
  This maps to sequencing technology in BAM. */
  @Deprecated public java.lang.CharSequence instrumentModel;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GAExperiment() {}

  /**
   * All-args constructor.
   */
  public GAExperiment(java.lang.CharSequence libraryId, java.lang.CharSequence platformUnit, java.lang.CharSequence sequencingCenter, java.lang.CharSequence instrumentModel) {
    this.libraryId = libraryId;
    this.platformUnit = platformUnit;
    this.sequencingCenter = sequencingCenter;
    this.instrumentModel = instrumentModel;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return libraryId;
    case 1: return platformUnit;
    case 2: return sequencingCenter;
    case 3: return instrumentModel;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: libraryId = (java.lang.CharSequence)value$; break;
    case 1: platformUnit = (java.lang.CharSequence)value$; break;
    case 2: sequencingCenter = (java.lang.CharSequence)value$; break;
    case 3: instrumentModel = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'libraryId' field.
   * The library used as part of this experiment.   */
  public java.lang.CharSequence getLibraryId() {
    return libraryId;
  }

  /**
   * Sets the value of the 'libraryId' field.
   * The library used as part of this experiment.   * @param value the value to set.
   */
  public void setLibraryId(java.lang.CharSequence value) {
    this.libraryId = value;
  }

  /**
   * Gets the value of the 'platformUnit' field.
   * The platform unit used as part of this experiment.   */
  public java.lang.CharSequence getPlatformUnit() {
    return platformUnit;
  }

  /**
   * Sets the value of the 'platformUnit' field.
   * The platform unit used as part of this experiment.   * @param value the value to set.
   */
  public void setPlatformUnit(java.lang.CharSequence value) {
    this.platformUnit = value;
  }

  /**
   * Gets the value of the 'sequencingCenter' field.
   * The sequencing center used as part of this experiment.   */
  public java.lang.CharSequence getSequencingCenter() {
    return sequencingCenter;
  }

  /**
   * Sets the value of the 'sequencingCenter' field.
   * The sequencing center used as part of this experiment.   * @param value the value to set.
   */
  public void setSequencingCenter(java.lang.CharSequence value) {
    this.sequencingCenter = value;
  }

  /**
   * Gets the value of the 'instrumentModel' field.
   * The instrument model used as part of this experiment.
  This maps to sequencing technology in BAM.   */
  public java.lang.CharSequence getInstrumentModel() {
    return instrumentModel;
  }

  /**
   * Sets the value of the 'instrumentModel' field.
   * The instrument model used as part of this experiment.
  This maps to sequencing technology in BAM.   * @param value the value to set.
   */
  public void setInstrumentModel(java.lang.CharSequence value) {
    this.instrumentModel = value;
  }

  /** Creates a new GAExperiment RecordBuilder */
  public static org.ga4gh.GAExperiment.Builder newBuilder() {
    return new org.ga4gh.GAExperiment.Builder();
  }
  
  /** Creates a new GAExperiment RecordBuilder by copying an existing Builder */
  public static org.ga4gh.GAExperiment.Builder newBuilder(org.ga4gh.GAExperiment.Builder other) {
    return new org.ga4gh.GAExperiment.Builder(other);
  }
  
  /** Creates a new GAExperiment RecordBuilder by copying an existing GAExperiment instance */
  public static org.ga4gh.GAExperiment.Builder newBuilder(org.ga4gh.GAExperiment other) {
    return new org.ga4gh.GAExperiment.Builder(other);
  }
  
  /**
   * RecordBuilder for GAExperiment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GAExperiment>
    implements org.apache.avro.data.RecordBuilder<GAExperiment> {

    private java.lang.CharSequence libraryId;
    private java.lang.CharSequence platformUnit;
    private java.lang.CharSequence sequencingCenter;
    private java.lang.CharSequence instrumentModel;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.GAExperiment.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.GAExperiment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.libraryId)) {
        this.libraryId = data().deepCopy(fields()[0].schema(), other.libraryId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.platformUnit)) {
        this.platformUnit = data().deepCopy(fields()[1].schema(), other.platformUnit);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sequencingCenter)) {
        this.sequencingCenter = data().deepCopy(fields()[2].schema(), other.sequencingCenter);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.instrumentModel)) {
        this.instrumentModel = data().deepCopy(fields()[3].schema(), other.instrumentModel);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GAExperiment instance */
    private Builder(org.ga4gh.GAExperiment other) {
            super(org.ga4gh.GAExperiment.SCHEMA$);
      if (isValidValue(fields()[0], other.libraryId)) {
        this.libraryId = data().deepCopy(fields()[0].schema(), other.libraryId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.platformUnit)) {
        this.platformUnit = data().deepCopy(fields()[1].schema(), other.platformUnit);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sequencingCenter)) {
        this.sequencingCenter = data().deepCopy(fields()[2].schema(), other.sequencingCenter);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.instrumentModel)) {
        this.instrumentModel = data().deepCopy(fields()[3].schema(), other.instrumentModel);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'libraryId' field */
    public java.lang.CharSequence getLibraryId() {
      return libraryId;
    }
    
    /** Sets the value of the 'libraryId' field */
    public org.ga4gh.GAExperiment.Builder setLibraryId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.libraryId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'libraryId' field has been set */
    public boolean hasLibraryId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'libraryId' field */
    public org.ga4gh.GAExperiment.Builder clearLibraryId() {
      libraryId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'platformUnit' field */
    public java.lang.CharSequence getPlatformUnit() {
      return platformUnit;
    }
    
    /** Sets the value of the 'platformUnit' field */
    public org.ga4gh.GAExperiment.Builder setPlatformUnit(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.platformUnit = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'platformUnit' field has been set */
    public boolean hasPlatformUnit() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'platformUnit' field */
    public org.ga4gh.GAExperiment.Builder clearPlatformUnit() {
      platformUnit = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sequencingCenter' field */
    public java.lang.CharSequence getSequencingCenter() {
      return sequencingCenter;
    }
    
    /** Sets the value of the 'sequencingCenter' field */
    public org.ga4gh.GAExperiment.Builder setSequencingCenter(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sequencingCenter = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'sequencingCenter' field has been set */
    public boolean hasSequencingCenter() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'sequencingCenter' field */
    public org.ga4gh.GAExperiment.Builder clearSequencingCenter() {
      sequencingCenter = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'instrumentModel' field */
    public java.lang.CharSequence getInstrumentModel() {
      return instrumentModel;
    }
    
    /** Sets the value of the 'instrumentModel' field */
    public org.ga4gh.GAExperiment.Builder setInstrumentModel(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.instrumentModel = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'instrumentModel' field has been set */
    public boolean hasInstrumentModel() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'instrumentModel' field */
    public org.ga4gh.GAExperiment.Builder clearInstrumentModel() {
      instrumentModel = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public GAExperiment build() {
      try {
        GAExperiment record = new GAExperiment();
        record.libraryId = fieldSetFlags()[0] ? this.libraryId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.platformUnit = fieldSetFlags()[1] ? this.platformUnit : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sequencingCenter = fieldSetFlags()[2] ? this.sequencingCenter : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.instrumentModel = fieldSetFlags()[3] ? this.instrumentModel : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
