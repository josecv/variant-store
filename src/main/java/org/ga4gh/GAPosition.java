/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh;  
@SuppressWarnings("all")
/** An abstraction for referring to a genomic position, in relation to some
already known reference. For now, represents a genomic position as a reference
name, a base number on that reference (0-based), and a flag to say if it's the
forward or reverse strand that we're talking about. */
@org.apache.avro.specific.AvroGenerated
public class GAPosition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GAPosition\",\"namespace\":\"org.ga4gh\",\"doc\":\"An abstraction for referring to a genomic position, in relation to some\\nalready known reference. For now, represents a genomic position as a reference\\nname, a base number on that reference (0-based), and a flag to say if it's the\\nforward or reverse strand that we're talking about.\",\"fields\":[{\"name\":\"referenceName\",\"type\":\"string\",\"doc\":\"The name of the reference (or, more technically, the scaffold) in whatever\\n  reference set is being used. Does not generally include a \\\"chr\\\" prefix, so for\\n  example \\\"X\\\" would be used for the X chromosome.\"},{\"name\":\"position\",\"type\":\"long\",\"doc\":\"The 0-based offset from the start of the forward strand for that reference.\\n  Genomic positions are non-negative integers less than reference length.\"},{\"name\":\"reverseStrand\",\"type\":\"boolean\",\"doc\":\"A flag to indicate if we are on the forward strand (`false`) or reverse\\n  strand (`true`).\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The name of the reference (or, more technically, the scaffold) in whatever
  reference set is being used. Does not generally include a "chr" prefix, so for
  example "X" would be used for the X chromosome. */
  @Deprecated public java.lang.CharSequence referenceName;
  /** The 0-based offset from the start of the forward strand for that reference.
  Genomic positions are non-negative integers less than reference length. */
  @Deprecated public long position;
  /** A flag to indicate if we are on the forward strand (`false`) or reverse
  strand (`true`). */
  @Deprecated public boolean reverseStrand;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GAPosition() {}

  /**
   * All-args constructor.
   */
  public GAPosition(java.lang.CharSequence referenceName, java.lang.Long position, java.lang.Boolean reverseStrand) {
    this.referenceName = referenceName;
    this.position = position;
    this.reverseStrand = reverseStrand;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return referenceName;
    case 1: return position;
    case 2: return reverseStrand;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: referenceName = (java.lang.CharSequence)value$; break;
    case 1: position = (java.lang.Long)value$; break;
    case 2: reverseStrand = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'referenceName' field.
   * The name of the reference (or, more technically, the scaffold) in whatever
  reference set is being used. Does not generally include a "chr" prefix, so for
  example "X" would be used for the X chromosome.   */
  public java.lang.CharSequence getReferenceName() {
    return referenceName;
  }

  /**
   * Sets the value of the 'referenceName' field.
   * The name of the reference (or, more technically, the scaffold) in whatever
  reference set is being used. Does not generally include a "chr" prefix, so for
  example "X" would be used for the X chromosome.   * @param value the value to set.
   */
  public void setReferenceName(java.lang.CharSequence value) {
    this.referenceName = value;
  }

  /**
   * Gets the value of the 'position' field.
   * The 0-based offset from the start of the forward strand for that reference.
  Genomic positions are non-negative integers less than reference length.   */
  public java.lang.Long getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * The 0-based offset from the start of the forward strand for that reference.
  Genomic positions are non-negative integers less than reference length.   * @param value the value to set.
   */
  public void setPosition(java.lang.Long value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'reverseStrand' field.
   * A flag to indicate if we are on the forward strand (`false`) or reverse
  strand (`true`).   */
  public java.lang.Boolean getReverseStrand() {
    return reverseStrand;
  }

  /**
   * Sets the value of the 'reverseStrand' field.
   * A flag to indicate if we are on the forward strand (`false`) or reverse
  strand (`true`).   * @param value the value to set.
   */
  public void setReverseStrand(java.lang.Boolean value) {
    this.reverseStrand = value;
  }

  /** Creates a new GAPosition RecordBuilder */
  public static org.ga4gh.GAPosition.Builder newBuilder() {
    return new org.ga4gh.GAPosition.Builder();
  }
  
  /** Creates a new GAPosition RecordBuilder by copying an existing Builder */
  public static org.ga4gh.GAPosition.Builder newBuilder(org.ga4gh.GAPosition.Builder other) {
    return new org.ga4gh.GAPosition.Builder(other);
  }
  
  /** Creates a new GAPosition RecordBuilder by copying an existing GAPosition instance */
  public static org.ga4gh.GAPosition.Builder newBuilder(org.ga4gh.GAPosition other) {
    return new org.ga4gh.GAPosition.Builder(other);
  }
  
  /**
   * RecordBuilder for GAPosition instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GAPosition>
    implements org.apache.avro.data.RecordBuilder<GAPosition> {

    private java.lang.CharSequence referenceName;
    private long position;
    private boolean reverseStrand;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.GAPosition.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.GAPosition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.referenceName)) {
        this.referenceName = data().deepCopy(fields()[0].schema(), other.referenceName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reverseStrand)) {
        this.reverseStrand = data().deepCopy(fields()[2].schema(), other.reverseStrand);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GAPosition instance */
    private Builder(org.ga4gh.GAPosition other) {
            super(org.ga4gh.GAPosition.SCHEMA$);
      if (isValidValue(fields()[0], other.referenceName)) {
        this.referenceName = data().deepCopy(fields()[0].schema(), other.referenceName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.reverseStrand)) {
        this.reverseStrand = data().deepCopy(fields()[2].schema(), other.reverseStrand);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'referenceName' field */
    public java.lang.CharSequence getReferenceName() {
      return referenceName;
    }
    
    /** Sets the value of the 'referenceName' field */
    public org.ga4gh.GAPosition.Builder setReferenceName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.referenceName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceName' field has been set */
    public boolean hasReferenceName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'referenceName' field */
    public org.ga4gh.GAPosition.Builder clearReferenceName() {
      referenceName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'position' field */
    public java.lang.Long getPosition() {
      return position;
    }
    
    /** Sets the value of the 'position' field */
    public org.ga4gh.GAPosition.Builder setPosition(long value) {
      validate(fields()[1], value);
      this.position = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'position' field has been set */
    public boolean hasPosition() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'position' field */
    public org.ga4gh.GAPosition.Builder clearPosition() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'reverseStrand' field */
    public java.lang.Boolean getReverseStrand() {
      return reverseStrand;
    }
    
    /** Sets the value of the 'reverseStrand' field */
    public org.ga4gh.GAPosition.Builder setReverseStrand(boolean value) {
      validate(fields()[2], value);
      this.reverseStrand = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'reverseStrand' field has been set */
    public boolean hasReverseStrand() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'reverseStrand' field */
    public org.ga4gh.GAPosition.Builder clearReverseStrand() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public GAPosition build() {
      try {
        GAPosition record = new GAPosition();
        record.referenceName = fieldSetFlags()[0] ? this.referenceName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.position = fieldSetFlags()[1] ? this.position : (java.lang.Long) defaultValue(fields()[1]);
        record.reverseStrand = fieldSetFlags()[2] ? this.reverseStrand : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
