/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh;  
@SuppressWarnings("all")
/** This is the response from `POST /variants/search` expressed as JSON. */
@org.apache.avro.specific.AvroGenerated
public class GASearchVariantsResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GASearchVariantsResponse\",\"namespace\":\"org.ga4gh\",\"doc\":\"This is the response from `POST /variants/search` expressed as JSON.\",\"fields\":[{\"name\":\"variants\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GAVariant\",\"doc\":\"A `GAVariant` represents a change in DNA sequence relative to some reference.\\nFor example, a variant could represent a SNP or an insertion.\\nVariants belong to a `GAVariantSet`.\\nThis is equivalent to a row in VCF.\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"The variant ID.\"},{\"name\":\"variantSetId\",\"type\":\"string\",\"doc\":\"The ID of the variant set this variant belongs to.\"},{\"name\":\"names\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"Names for the variant, for example a RefSNP ID.\",\"default\":[]},{\"name\":\"created\",\"type\":[\"null\",\"long\"],\"doc\":\"The date this variant was created in milliseconds from the epoch.\",\"default\":null},{\"name\":\"updated\",\"type\":[\"null\",\"long\"],\"doc\":\"The time at which this variant was last updated in\\n  milliseconds from the epoch.\",\"default\":null},{\"name\":\"referenceName\",\"type\":\"string\",\"doc\":\"The reference on which this variant occurs.\\n  (e.g. `chr20` or `X`)\"},{\"name\":\"start\",\"type\":\"long\",\"doc\":\"The start position at which this variant occurs (0-based).\\n  This corresponds to the first base of the string of reference bases.\\n  Genomic positions are non-negative integers less than reference length.\\n  Variants spanning the join of circular genomes are represented as\\n  two variants one on each side of the join (position 0).\"},{\"name\":\"end\",\"type\":\"long\",\"doc\":\"The end position (exclusive), resulting in [start, end) closed-open interval.\\n  This is typically calculated by `start + referenceBases.length`.\"},{\"name\":\"referenceBases\",\"type\":\"string\",\"doc\":\"The reference bases for this variant. They start at the given position.\"},{\"name\":\"alternateBases\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"The bases that appear instead of the reference bases.\",\"default\":[]},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":\"string\"}},\"doc\":\"A map of additional variant information.\",\"default\":{}},{\"name\":\"calls\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GACall\",\"doc\":\"A `GACall` represents the determination of genotype with respect to a\\nparticular variant. It may include associated information such as quality\\nand phasing. For example, a call might assign a probability of 0.32 to\\nthe occurrence of a SNP named rs1234 in a call set with the name NA12345.\",\"fields\":[{\"name\":\"callSetId\",\"type\":[\"null\",\"string\"],\"doc\":\"The ID of the call set this variant call belongs to.\\n  If this field is not present, the ordering of the call sets from a\\n  `SearchCallSetsRequest` over this `GAVariantSet` is guaranteed to match\\n  the ordering of the calls on this `GAVariant`.\\n  The number of results will also be the same.\"},{\"name\":\"callSetName\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the call set this variant call belongs to.\\n  If this field is not present, the ordering of the call sets from a\\n  `SearchCallSetsRequest` over this `GAVariantSet` is guaranteed to match\\n  the ordering of the calls on this `GAVariant`.\\n  The number of results will also be the same.\",\"default\":null},{\"name\":\"genotype\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"doc\":\"The genotype of this variant call. Each value represents either the value\\n  of the referenceBases field or is a 1-based index into alternateBases.\\n  If a variant had a referenceBases field of \\\"T\\\", an alternateBases\\n  value of [\\\"A\\\", \\\"C\\\"], and the genotype was [2, 1], that would mean the call\\n  represented the heterozygous value \\\"CA\\\" for this variant. If the genotype\\n  was instead [0, 1] the represented value would be \\\"TA\\\". Ordering of the\\n  genotype values is important if the phaseset field is present.\",\"default\":[]},{\"name\":\"phaseset\",\"type\":[\"null\",\"string\"],\"doc\":\"If this field is present, this variant call's genotype ordering implies\\n  the phase of the bases and is consistent with any other variant calls on\\n  the same contig which have the same phaseset value.\",\"default\":null},{\"name\":\"genotypeLikelihood\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"The genotype likelihoods for this variant call. Each array entry\\n  represents how likely a specific genotype is for this call. The value\\n  ordering is defined by the GL tag in the VCF spec.\",\"default\":[]},{\"name\":\"info\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":\"string\"}},\"doc\":\"A map of additional variant call information.\",\"default\":{}}]}},\"doc\":\"The variant calls for this particular variant. Each one represents the\\n  determination of genotype with respect to this variant.\",\"default\":[]}]}},\"doc\":\"The list of matching variants.\\n  If the `callSetId` field on the returned calls is not present,\\n  the ordering of the call sets from a `SearchCallSetsRequest`\\n  over the parent `GAVariantSet` is guaranteed to match the ordering\\n  of the calls on each `GAVariant`. The number of results will also be\\n  the same.\",\"default\":[]},{\"name\":\"nextPageToken\",\"type\":[\"null\",\"string\"],\"doc\":\"The continuation token, which is used to page through large result sets.\\n  Provide this value in a subsequent request to return the next page of\\n  results. This field will be empty if there aren't any additional results.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The list of matching variants.
  If the `callSetId` field on the returned calls is not present,
  the ordering of the call sets from a `SearchCallSetsRequest`
  over the parent `GAVariantSet` is guaranteed to match the ordering
  of the calls on each `GAVariant`. The number of results will also be
  the same. */
  @Deprecated public java.util.List<org.ga4gh.GAVariant> variants;
  /** The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results. */
  @Deprecated public java.lang.CharSequence nextPageToken;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GASearchVariantsResponse() {}

  /**
   * All-args constructor.
   */
  public GASearchVariantsResponse(java.util.List<org.ga4gh.GAVariant> variants, java.lang.CharSequence nextPageToken) {
    this.variants = variants;
    this.nextPageToken = nextPageToken;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return variants;
    case 1: return nextPageToken;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: variants = (java.util.List<org.ga4gh.GAVariant>)value$; break;
    case 1: nextPageToken = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'variants' field.
   * The list of matching variants.
  If the `callSetId` field on the returned calls is not present,
  the ordering of the call sets from a `SearchCallSetsRequest`
  over the parent `GAVariantSet` is guaranteed to match the ordering
  of the calls on each `GAVariant`. The number of results will also be
  the same.   */
  public java.util.List<org.ga4gh.GAVariant> getVariants() {
    return variants;
  }

  /**
   * Sets the value of the 'variants' field.
   * The list of matching variants.
  If the `callSetId` field on the returned calls is not present,
  the ordering of the call sets from a `SearchCallSetsRequest`
  over the parent `GAVariantSet` is guaranteed to match the ordering
  of the calls on each `GAVariant`. The number of results will also be
  the same.   * @param value the value to set.
   */
  public void setVariants(java.util.List<org.ga4gh.GAVariant> value) {
    this.variants = value;
  }

  /**
   * Gets the value of the 'nextPageToken' field.
   * The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.   */
  public java.lang.CharSequence getNextPageToken() {
    return nextPageToken;
  }

  /**
   * Sets the value of the 'nextPageToken' field.
   * The continuation token, which is used to page through large result sets.
  Provide this value in a subsequent request to return the next page of
  results. This field will be empty if there aren't any additional results.   * @param value the value to set.
   */
  public void setNextPageToken(java.lang.CharSequence value) {
    this.nextPageToken = value;
  }

  /** Creates a new GASearchVariantsResponse RecordBuilder */
  public static org.ga4gh.GASearchVariantsResponse.Builder newBuilder() {
    return new org.ga4gh.GASearchVariantsResponse.Builder();
  }
  
  /** Creates a new GASearchVariantsResponse RecordBuilder by copying an existing Builder */
  public static org.ga4gh.GASearchVariantsResponse.Builder newBuilder(org.ga4gh.GASearchVariantsResponse.Builder other) {
    return new org.ga4gh.GASearchVariantsResponse.Builder(other);
  }
  
  /** Creates a new GASearchVariantsResponse RecordBuilder by copying an existing GASearchVariantsResponse instance */
  public static org.ga4gh.GASearchVariantsResponse.Builder newBuilder(org.ga4gh.GASearchVariantsResponse other) {
    return new org.ga4gh.GASearchVariantsResponse.Builder(other);
  }
  
  /**
   * RecordBuilder for GASearchVariantsResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GASearchVariantsResponse>
    implements org.apache.avro.data.RecordBuilder<GASearchVariantsResponse> {

    private java.util.List<org.ga4gh.GAVariant> variants;
    private java.lang.CharSequence nextPageToken;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.GASearchVariantsResponse.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.GASearchVariantsResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.variants)) {
        this.variants = data().deepCopy(fields()[0].schema(), other.variants);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nextPageToken)) {
        this.nextPageToken = data().deepCopy(fields()[1].schema(), other.nextPageToken);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GASearchVariantsResponse instance */
    private Builder(org.ga4gh.GASearchVariantsResponse other) {
            super(org.ga4gh.GASearchVariantsResponse.SCHEMA$);
      if (isValidValue(fields()[0], other.variants)) {
        this.variants = data().deepCopy(fields()[0].schema(), other.variants);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nextPageToken)) {
        this.nextPageToken = data().deepCopy(fields()[1].schema(), other.nextPageToken);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'variants' field */
    public java.util.List<org.ga4gh.GAVariant> getVariants() {
      return variants;
    }
    
    /** Sets the value of the 'variants' field */
    public org.ga4gh.GASearchVariantsResponse.Builder setVariants(java.util.List<org.ga4gh.GAVariant> value) {
      validate(fields()[0], value);
      this.variants = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'variants' field has been set */
    public boolean hasVariants() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'variants' field */
    public org.ga4gh.GASearchVariantsResponse.Builder clearVariants() {
      variants = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'nextPageToken' field */
    public java.lang.CharSequence getNextPageToken() {
      return nextPageToken;
    }
    
    /** Sets the value of the 'nextPageToken' field */
    public org.ga4gh.GASearchVariantsResponse.Builder setNextPageToken(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.nextPageToken = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'nextPageToken' field has been set */
    public boolean hasNextPageToken() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'nextPageToken' field */
    public org.ga4gh.GASearchVariantsResponse.Builder clearNextPageToken() {
      nextPageToken = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public GASearchVariantsResponse build() {
      try {
        GASearchVariantsResponse record = new GASearchVariantsResponse();
        record.variants = fieldSetFlags()[0] ? this.variants : (java.util.List<org.ga4gh.GAVariant>) defaultValue(fields()[0]);
        record.nextPageToken = fieldSetFlags()[1] ? this.nextPageToken : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
