/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ga4gh;  
@SuppressWarnings("all")
/** A linear alignment can be represented by one CIGAR string. */
@org.apache.avro.specific.AvroGenerated
public class GALinearAlignment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GALinearAlignment\",\"namespace\":\"org.ga4gh\",\"doc\":\"A linear alignment can be represented by one CIGAR string.\",\"fields\":[{\"name\":\"position\",\"type\":{\"type\":\"record\",\"name\":\"GAPosition\",\"doc\":\"An abstraction for referring to a genomic position, in relation to some\\nalready known reference. For now, represents a genomic position as a reference\\nname, a base number on that reference (0-based), and a flag to say if it's the\\nforward or reverse strand that we're talking about.\",\"fields\":[{\"name\":\"referenceName\",\"type\":\"string\",\"doc\":\"The name of the reference (or, more technically, the scaffold) in whatever\\n  reference set is being used. Does not generally include a \\\"chr\\\" prefix, so for\\n  example \\\"X\\\" would be used for the X chromosome.\"},{\"name\":\"position\",\"type\":\"long\",\"doc\":\"The 0-based offset from the start of the forward strand for that reference.\\n  Genomic positions are non-negative integers less than reference length.\"},{\"name\":\"reverseStrand\",\"type\":\"boolean\",\"doc\":\"A flag to indicate if we are on the forward strand (`false`) or reverse\\n  strand (`true`).\"}]},\"doc\":\"The position of this alignment.\"},{\"name\":\"mappingQuality\",\"type\":[\"null\",\"int\"],\"doc\":\"The mapping quality of this alignment. Represents how likely\\n  the read maps to this position as opposed to other locations.\",\"default\":null},{\"name\":\"cigar\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GACigarUnit\",\"doc\":\"A structure for an instance of a CIGAR operation.\",\"fields\":[{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"GACigarOperation\",\"doc\":\"An enum for the different types of CIGAR alignment operations that exist.\\nUsed wherever CIGAR alignments are used. The different enumerated values\\nhave the following usage:\\n\\n* `ALIGNMENT_MATCH`: An alignment match indicates that a sequence can be\\n  aligned to the reference without evidence of an INDEL. Unlike the\\n  `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators, the `ALIGNMENT_MATCH`\\n  operator does not indicate whether the reference and read sequences are an\\n  exact match. This operator is equivalent to SAM's `M`.\\n* `INSERT`: The insert operator indicates that the read contains evidence of\\n  bases being inserted into the reference. This operator is equivalent to\\n  SAM's `I`.\\n* `DELETE`: The delete operator indicates that the read contains evidence of\\n  bases being deleted from the reference. This operator is equivalent to\\n  SAM's `D`.\\n* `SKIP`: The skip operator indicates that this read skips a long segment of\\n  the reference, but the bases have not been deleted. This operator is\\n  commonly used when working with RNA-seq data, where reads may skip long\\n  segments of the reference between exons. This operator is equivalent to\\n  SAM's 'N'.\\n* `CLIP_SOFT`: The soft clip operator indicates that bases at the start/end\\n  of a read have not been considered during alignment. This may occur if the\\n  majority of a read maps, except for low quality bases at the start/end of\\n  a read. This operator is equivalent to SAM's 'S'. Bases that are soft clipped\\n  will still be stored in the read.\\n* `CLIP_HARD`: The hard clip operator indicates that bases at the start/end of\\n  a read have been omitted from this alignment. This may occur if this linear\\n  alignment is part of a chimeric alignment, or if the read has been trimmed\\n  (e.g., during error correction, or to trim poly-A tails for RNA-seq). This\\n  operator is equivalent to SAM's 'H'.\\n* `PAD`: The pad operator indicates that there is padding in an alignment.\\n  This operator is equivalent to SAM's 'P'.\\n* `SEQUENCE_MATCH`: This operator indicates that this portion of the aligned\\n  sequence exactly matches the reference (e.g., all bases are equal to the\\n  reference bases). This operator is equivalent to SAM's '='.\\n* `SEQUENCE_MISMATCH`: This operator indicates that this portion of the\\n  aligned sequence is an alignment match to the reference, but a sequence\\n  mismatch (e.g., the bases are not equal to the reference). This can\\n  indicate a SNP or a read error. This operator is equivalent to SAM's 'X'.\",\"symbols\":[\"ALIGNMENT_MATCH\",\"INSERT\",\"DELETE\",\"SKIP\",\"CLIP_SOFT\",\"CLIP_HARD\",\"PAD\",\"SEQUENCE_MATCH\",\"SEQUENCE_MISMATCH\"]},\"doc\":\"The operation type.\"},{\"name\":\"operationLength\",\"type\":\"long\",\"doc\":\"The number of bases that the operation runs for.\"},{\"name\":\"referenceSequence\",\"type\":[\"null\",\"string\"],\"doc\":\"`referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)\\n  and deletions (`DELETE`). Filling this field replaces the MD tag.\\n  If the relevant information is not available, leave this field as `null`.\",\"default\":null}]}},\"doc\":\"Represents the local alignment of this sequence (alignment matches, indels, etc)\\n  versus the reference.\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The position of this alignment. */
  @Deprecated public org.ga4gh.GAPosition position;
  /** The mapping quality of this alignment. Represents how likely
  the read maps to this position as opposed to other locations. */
  @Deprecated public java.lang.Integer mappingQuality;
  /** Represents the local alignment of this sequence (alignment matches, indels, etc)
  versus the reference. */
  @Deprecated public java.util.List<org.ga4gh.GACigarUnit> cigar;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GALinearAlignment() {}

  /**
   * All-args constructor.
   */
  public GALinearAlignment(org.ga4gh.GAPosition position, java.lang.Integer mappingQuality, java.util.List<org.ga4gh.GACigarUnit> cigar) {
    this.position = position;
    this.mappingQuality = mappingQuality;
    this.cigar = cigar;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return position;
    case 1: return mappingQuality;
    case 2: return cigar;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: position = (org.ga4gh.GAPosition)value$; break;
    case 1: mappingQuality = (java.lang.Integer)value$; break;
    case 2: cigar = (java.util.List<org.ga4gh.GACigarUnit>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'position' field.
   * The position of this alignment.   */
  public org.ga4gh.GAPosition getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * The position of this alignment.   * @param value the value to set.
   */
  public void setPosition(org.ga4gh.GAPosition value) {
    this.position = value;
  }

  /**
   * Gets the value of the 'mappingQuality' field.
   * The mapping quality of this alignment. Represents how likely
  the read maps to this position as opposed to other locations.   */
  public java.lang.Integer getMappingQuality() {
    return mappingQuality;
  }

  /**
   * Sets the value of the 'mappingQuality' field.
   * The mapping quality of this alignment. Represents how likely
  the read maps to this position as opposed to other locations.   * @param value the value to set.
   */
  public void setMappingQuality(java.lang.Integer value) {
    this.mappingQuality = value;
  }

  /**
   * Gets the value of the 'cigar' field.
   * Represents the local alignment of this sequence (alignment matches, indels, etc)
  versus the reference.   */
  public java.util.List<org.ga4gh.GACigarUnit> getCigar() {
    return cigar;
  }

  /**
   * Sets the value of the 'cigar' field.
   * Represents the local alignment of this sequence (alignment matches, indels, etc)
  versus the reference.   * @param value the value to set.
   */
  public void setCigar(java.util.List<org.ga4gh.GACigarUnit> value) {
    this.cigar = value;
  }

  /** Creates a new GALinearAlignment RecordBuilder */
  public static org.ga4gh.GALinearAlignment.Builder newBuilder() {
    return new org.ga4gh.GALinearAlignment.Builder();
  }
  
  /** Creates a new GALinearAlignment RecordBuilder by copying an existing Builder */
  public static org.ga4gh.GALinearAlignment.Builder newBuilder(org.ga4gh.GALinearAlignment.Builder other) {
    return new org.ga4gh.GALinearAlignment.Builder(other);
  }
  
  /** Creates a new GALinearAlignment RecordBuilder by copying an existing GALinearAlignment instance */
  public static org.ga4gh.GALinearAlignment.Builder newBuilder(org.ga4gh.GALinearAlignment other) {
    return new org.ga4gh.GALinearAlignment.Builder(other);
  }
  
  /**
   * RecordBuilder for GALinearAlignment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GALinearAlignment>
    implements org.apache.avro.data.RecordBuilder<GALinearAlignment> {

    private org.ga4gh.GAPosition position;
    private java.lang.Integer mappingQuality;
    private java.util.List<org.ga4gh.GACigarUnit> cigar;

    /** Creates a new Builder */
    private Builder() {
      super(org.ga4gh.GALinearAlignment.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ga4gh.GALinearAlignment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.position)) {
        this.position = data().deepCopy(fields()[0].schema(), other.position);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mappingQuality)) {
        this.mappingQuality = data().deepCopy(fields()[1].schema(), other.mappingQuality);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cigar)) {
        this.cigar = data().deepCopy(fields()[2].schema(), other.cigar);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GALinearAlignment instance */
    private Builder(org.ga4gh.GALinearAlignment other) {
            super(org.ga4gh.GALinearAlignment.SCHEMA$);
      if (isValidValue(fields()[0], other.position)) {
        this.position = data().deepCopy(fields()[0].schema(), other.position);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mappingQuality)) {
        this.mappingQuality = data().deepCopy(fields()[1].schema(), other.mappingQuality);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cigar)) {
        this.cigar = data().deepCopy(fields()[2].schema(), other.cigar);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'position' field */
    public org.ga4gh.GAPosition getPosition() {
      return position;
    }
    
    /** Sets the value of the 'position' field */
    public org.ga4gh.GALinearAlignment.Builder setPosition(org.ga4gh.GAPosition value) {
      validate(fields()[0], value);
      this.position = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'position' field has been set */
    public boolean hasPosition() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'position' field */
    public org.ga4gh.GALinearAlignment.Builder clearPosition() {
      position = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'mappingQuality' field */
    public java.lang.Integer getMappingQuality() {
      return mappingQuality;
    }
    
    /** Sets the value of the 'mappingQuality' field */
    public org.ga4gh.GALinearAlignment.Builder setMappingQuality(java.lang.Integer value) {
      validate(fields()[1], value);
      this.mappingQuality = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'mappingQuality' field has been set */
    public boolean hasMappingQuality() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'mappingQuality' field */
    public org.ga4gh.GALinearAlignment.Builder clearMappingQuality() {
      mappingQuality = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'cigar' field */
    public java.util.List<org.ga4gh.GACigarUnit> getCigar() {
      return cigar;
    }
    
    /** Sets the value of the 'cigar' field */
    public org.ga4gh.GALinearAlignment.Builder setCigar(java.util.List<org.ga4gh.GACigarUnit> value) {
      validate(fields()[2], value);
      this.cigar = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'cigar' field has been set */
    public boolean hasCigar() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'cigar' field */
    public org.ga4gh.GALinearAlignment.Builder clearCigar() {
      cigar = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public GALinearAlignment build() {
      try {
        GALinearAlignment record = new GALinearAlignment();
        record.position = fieldSetFlags()[0] ? this.position : (org.ga4gh.GAPosition) defaultValue(fields()[0]);
        record.mappingQuality = fieldSetFlags()[1] ? this.mappingQuality : (java.lang.Integer) defaultValue(fields()[1]);
        record.cigar = fieldSetFlags()[2] ? this.cigar : (java.util.List<org.ga4gh.GACigarUnit>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
